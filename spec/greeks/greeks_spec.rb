require File.expand_path("../spec_helper.rb", File.dirname(__FILE__))

describe Math::Greeks::Calculator do
  # Helper method to iterate the sample data
  def compare_csv(days, option_type)
    table = CSV.table(File.join(File.dirname(__FILE__), "#{days}days.#{option_type}s.csv"))
    
    table.each do |row|
      # Convert to a hash
      row = row.to_hash

      # Strip empty/nil values 
      row.each do |k,v| 
        if v.to_s === "nil" || v.to_s.strip.empty?
          row[k] = nil
        else
          row[k] = row[k].to_f
        end
      end
      
      # Calculate the options
      row.merge!(:option_type => option_type)
      Math::Greeks::Calculator.new(row).should be_a_greeks_hash row
    end
  end

  it "compute call options @ 22 days" do
    pending # compare_csv(22, :call)
  end

  it "compute put options @ 22 days" do
    pending # compare_csv(22, :put)
  end

  it "compute call options @ 50 days" do
    pending # compare_csv(50, :call)
  end

  it "compute put options @ 50 days" do
    pending # compare_csv(50, :put)
  end
  
  describe 'Haliburton at 24 days' do
    let(:last_price) { 50.75 }
    let(:day_change) { 0.35 }
    let(:day_change_pct) { 0.69 }
    let(:interest_rate_assumption_pct) { 0.01 }
    let(:dividends_until_expiration) { 0.00 }
    let(:expires_in_days) { 24 }
    let(:expires_in_year_pct) { (option_expires_in_days + 1.0) / 365.0 }
    
    # Shared examples for a range of strike prices
    shared_examples 'options' do |option_type, rows|
      rows.each do |row|
        context "#{option_type.to_s} @ #{row.first} ->" do
          before(:each) do
            @opts = {
              stock_price: last_price,
              stock_dividend_rate: dividends_until_expiration / last_price,
              option_type: option_type,
              option_strike: row[0],
              option_price: (row[2] + row[4]) / 2.0, # Mid,
              option_expires_in_days: expires_in_days,
              federal_reserve_interest_rate: interest_rate_assumption_pct,
              option_volume: row[9],
              option_open_interest: row[10]
            }
            @greek = Math::Greeks::Calculator.new(@opts)
          end
                
          it 'break_even' do
            @greek.break_even.should nilable_equals_pct row[-2], 2
          end
        
          it 'premium_value' do
            @greek.premium_value.should strict_equals row[-5], 2
          end
        
          it 'time_value' do
            @greek.time_value.should strict_equals row[-4], 2
          end
        
          it 'annualized_premium_value' do
            @greek.annualized_premium_value.should strict_equals row[-6], 2
          end
        
          it 'annualized_time_value' do
            binding.pry
            @greek.annualized_time_value.should strict_equals row[-3], 2
          end
        
          it 'iv' do
            @greek.iv.should nilable_equals_pct row[11], 1
          end
        end
      end
    end
    
    context '>>' do
      # Strike, Last Trade, Bid, Mid, Ask, Change, Change (Price), Change (IV), Change (Time), Volume, Open Interest, Implied Volatility, Delta Implied Volatility, Delta (%/%), Delta/ Theta, MOE, Strike/ Stock, Annualized Premium, Intrinsic Value, Time Value, Annualized Time Value, Chance of Breakeven, Break Even Return %
      @option_calls = [
        [38.00,12.50,12.75,12.80,12.85,0.00,0.33,0.33,0.03,1,64,55.2,-24.7,3.9,-73.50,0.20,75,423.85,12.75,0.05,1.92,46.85,0.10],
        # [39.00,12.25,11.75,11.80,11.85,0.00,0.32,0.33,0.03,39,39,50.8,-23.3,4.2,-75.04,0.20,77,385.93,11.75,0.05,1.87,47.06,0.10],
        # [40.00,'N/A',10.75,10.80,10.85,0.00,0.32,0.33,0.03,0,0,46.5,-21.9,4.6,-76.76,0.20,79,348.96,10.75,0.05,1.82,47.25,0.10],
        # [41.00,'N/A',9.75,9.80,9.85,0.00,0.32,0.33,0.03,0,0,42.3,-20.6,5.1,-78.69,0.20,81,312.91,9.75,0.05,1.78,47.44,0.10],
        # [42.00,'N/A',8.75,8.83,8.90,0.00,0.32,0.33,0.03,0,0,40.8,-17.5,5.6,-59.81,0.31,83,278.45,8.75,0.08,2.60,47.32,0.15],
        # [43.00,'N/A',7.80,7.85,7.90,0.00,0.31,0.32,0.03,0,0,38.6,-15.1,6.2,-49.24,0.21,85,244.81,7.75,0.10,3.39,47.21,0.20],
        # [44.00,'N/A',6.80,6.85,6.90,0.00,0.31,0.32,0.03,0,0,34.2,-13.9,7.0,-50.74,0.21,87,211.25,6.75,0.10,3.31,47.34,0.20],
        # [45.00,5.30,5.85,5.90,5.95,0.00,0.30,0.30,0.03,41,30,33.0,-11.1,8.0,-37.61,0.21,89,179.87,5.75,0.15,4.86,46.92,0.30],
        # [46.00,5.60,4.95,5.00,5.05,0.00,0.29,0.29,0.03,3,5,32.4,-8.7,9.0,-26.85,0.22,91,150.65,4.75,0.25,7.91,46.01,0.49],
        # [47.00,3.75,4.05,4.10,4.15,0.00,0.28,0.27,0.03,10,10,30.5,-7.1,10.4,-21.78,0.23,93,122.11,3.75,0.35,10.83,44.99,0.69],
        # [48.00,3.10,3.20,3.25,3.30,0.00,0.26,0.24,0.03,324,209,29.0,-5.4,12.2,-17.38,0.25,95,95.65,2.75,0.50,15.13,43.36,0.99],
        # [49.00,2.30,2.47,2.49,2.50,0.00,0.23,0.21,0.03,58,185,27.8,-4.3,14.3,-13.79,0.08,97,72.23,1.75,0.74,21.74,40.74,1.45],
        # [50.00,1.66,1.81,1.83,1.84,0.00,0.20,0.17,0.03,24,559,27.0,-3.3,16.6,-10.93,0.10,99,52.34,0.75,1.08,31.06,36.99,2.12],
        # [51.00,1.21,1.28,1.29,1.29,0.00,0.17,0.14,0.03,128,300,26.5,-2.6,19.2,-8.78,0.04,100,36.33,0.00,1.29,36.33,32.12,3.02],
        # [52.00,0.81,0.86,0.87,0.88,0.00,0.13,0.10,0.03,115,559,26.2,-2.0,21.8,-7.19,0.11,102,24.22,0.00,0.87,24.22,26.43,4.18],
        # [53.00,0.56,0.57,0.58,0.58,0.00,0.10,0.07,0.02,7,330,26.4,-1.6,24.4,-5.98,0.07,104,15.75,0.00,0.58,15.75,20.64,5.57],
        # [54.00,0.33,0.36,0.37,0.38,0.00,0.07,0.05,0.02,25,33,26.6,-1.3,26.8,-5.09,0.20,106,9.97,0.00,0.37,9.97,15.25,7.13],
        # [55.00,0.20,0.23,0.24,0.24,0.00,0.05,0.03,0.01,11,160,26.9,-1.1,29.0,-4.40,0.15,108,6.22,0.00,0.24,6.22,10.82,8.84],
        # [56.00,0.21,0.14,0.15,0.16,0.00,0.03,0.02,0.01,1,21,27.5,-0.9,30.8,-3.87,0.43,110,3.91,0.00,0.15,3.91,7.45,10.64],
        # [57.00,0.14,0.09,0.10,0.11,0.00,0.02,0.01,0.01,5,22,28.3,-0.8,32.0,-3.43,0.62,112,2.56,0.00,0.10,2.56,5.18,12.51],
        # [58.00,0.11,0.06,0.07,0.08,0.00,0.02,0.01,0.01,11,11,29.4,-0.7,32.5,-3.08,0.88,114,1.76,0.00,0.07,1.76,3.68,14.42],
        # [59.00,0.09,0.04,0.05,0.06,0.00,0.01,0.01,0.01,14,18,30.5,-0.6,32.9,-2.80,1.22,116,1.24,0.00,0.05,1.24,2.64,16.35],
        # [60.00,0.06,0.02,0.03,0.04,0.00,0.01,0.00,0.00,4,34,30.7,-0.5,34.9,-2.58,1.91,118,0.73,0.00,0.03,0.73,1.67,18.29],
        # [61.00,'N/A',0.01,0.03,0.04,0.00,0.01,0.00,0.00,0,0,32.4,-0.4,33.8,-2.37,3.55,120,0.60,0.00,0.03,0.60,1.33,20.25]
      ]
      
      it_behaves_like 'options', :call, @option_calls
    end
    
    context '>>' do
      @option_puts = [
        [38.00,0.04,0.03,0.04,0.05,0.00,0.01,0.01,0.00,10,0,52.9,2.1,-19.5,1.44,2.57,75,1.54,0.00,0.04,1.54,2.12,-25.20],
        # # [39.00,0.09,0.04,0.05,0.06,0.00,nil,nil,nil,370,333,nil,nil,nil,nil,nil,77,nil,0.00,nil,nil,nil,nil],
        # [40.00,0.09,0.04,0.05,0.06,0.00,0.01,0.02,0.01,10,12,46.2,2.0,-21.5,1.72,1.86,79,1.82,0.00,0.05,1.82,2.74,-21.28],
        # [41.00,0.07,0.05,0.06,0.07,0.00,0.01,0.02,0.01,7,48,43.3,2.0,-22.3,1.90,1.50,81,2.14,0.00,0.06,2.14,3.31,-19.33],
        # [42.00,0.08,0.06,0.07,0.08,0.00,0.01,0.02,0.01,39,144,40.3,1.9,-23.4,2.12,1.22,83,2.43,0.00,0.07,2.43,3.92,-17.38],
        # [43.00,0.10,0.08,0.09,0.10,0.00,0.01,0.03,0.01,59,117,37.9,2.0,-24.0,2.37,0.93,85,3.05,0.00,0.09,3.05,5.01,-15.45],
        # [44.00,0.11,0.11,0.12,0.12,0.00,0.02,0.03,0.01,16,41,35.3,2.0,-24.6,2.68,0.35,87,3.81,0.00,0.12,3.81,6.33,-13.53],
        # [45.00,0.16,0.15,0.16,0.16,0.00,0.03,0.04,0.01,10,20,33.1,2.0,-24.9,3.07,0.26,89,5.02,0.00,0.16,5.02,8.28,-11.64],
        # [46.00,0.21,0.21,0.22,0.23,0.00,0.04,0.06,0.01,15,28,31.3,2.1,-24.7,3.55,0.37,91,6.97,0.00,0.22,6.97,11.14,-9.79],
        # [47.00,0.34,0.31,0.32,0.33,0.00,0.05,0.08,0.02,1,235,29.6,2.3,-24.0,4.17,0.26,93,9.91,0.00,0.32,9.91,14.90,-8.02],
        # [48.00,0.56,0.47,0.48,0.49,0.00,0.07,0.11,0.02,38,80,28.5,2.5,-22.9,4.95,0.18,95,14.53,0.00,0.48,14.53,19.90,-6.36],
        # [49.00,0.75,0.70,0.71,0.72,0.00,0.11,0.14,0.02,13,360,27.2,2.8,-21.3,6.04,0.13,97,21.00,0.00,0.71,21.00,25.40,-4.85],
        # [50.00,1.23,1.04,1.05,1.06,0.00,0.14,0.17,0.02,654,527,26.5,3.3,-19.4,7.49,0.10,99,30.34,0.00,1.05,30.34,31.34,-3.55],
        # [51.00,1.58,1.50,1.51,1.52,0.00,0.19,0.21,0.02,72,506,26.0,4.0,-17.3,9.49,0.08,100,42.60,0.25,1.26,35.63,36.87,-2.48],
        # [52.00,2.18,2.09,2.10,2.11,0.00,0.24,0.25,0.02,34,134,25.9,5.2,-15.2,12.26,0.06,102,57.80,1.25,0.85,23.67,41.45,-1.67],
        # [53.00,3.10,2.78,2.81,2.83,0.00,0.29,0.28,0.01,1,32,25.9,7.4,-13.2,16.13,0.14,104,75.29,2.25,0.56,15.21,44.90,-1.09],
        # [54.00,4.05,3.55,3.60,3.65,0.00,0.35,0.31,0.00,6,82,26.0,16.1,-11.4,21.92,0.24,106,94.23,3.25,0.35,9.43,47.30,-0.69],
        # [55.00,4.50,4.40,4.45,4.50,0.00,nil,nil,nil,34,35,25.7,nil,-10.0,32.10,0.22,108,113.59,4.25,0.20,5.30,49.00,-0.39],
        # [56.00,5.70,5.30,5.38,5.45,0.00,nil,nil,nil,4,33,26.5,nil,-8.7,43.23,0.32,110,133.81,5.25,0.13,3.26,49.96,-0.25],
        # [57.00,6.20,6.25,6.33,6.40,0.00,nil,nil,nil,44,44,26.7,nil,-7.6,63.70,0.31,112,153.63,6.25,0.08,1.92,50.55,-0.15],
        # [58.00,'N/A',7.25,7.30,7.35,0.00,nil,nil,nil,0,0,27.8,nil,-6.7,83.53,0.20,114,173.08,7.25,0.05,1.26,50.91,-0.10],
        # [59.00,'N/A',8.25,8.30,8.35,0.00,nil,nil,nil,0,0,30.7,nil,-5.9,80.81,0.20,116,192.17,8.25,0.05,1.24,51.11,-0.10],
        # [60.00,'N/A',9.20,9.28,9.35,0.00,nil,nil,nil,0,0,30.0,nil,-5.4,140.41,0.30,118,209.86,9.25,0.03,0.61,51.31,-0.05],
        # [61.00,11.40,10.20,10.28,10.35,0.00,nil,nil,nil,23,23,32.5,nil,-4.9,137.37,0.30,120,227.28,10.25,0.03,0.60,51.46,-0.05]
      ]
      
      it_behaves_like 'options', :put, @option_puts
    end
    
  end
end